// 假设 Innertube 是从某个库导入的
import { ClientType, Innertube } from "youtubei.js"; // 根据实际库路径调整
import {
  FetchFunction,
  ICache,
  InnerTubeConfig,
} from "youtubei.js/dist/src/types";
import { DeviceCategory } from "youtubei.js/dist/src/utils/Utils";
import baseConfig from "#config/baseConfig";

class InnertubeClient {
  private _innertube: Innertube | null = null; // 私有变量存储实例

  /**
   * Language.
   */
  lang?: string;
  /**
   * Geolocation.
   */
  location?: string;
  /**
   * User agent (InnerTube requests only).
   */
  user_agent?: string;
  /**
   * The account index to use. This is useful if you have multiple accounts logged in.
   *
   * **NOTE:** Only works if you are signed in with cookies.
   */
  account_index?: number;
  /**
   * Specify the Page ID of the YouTube profile/channel to use, if the logged-in account has multiple profiles.
   */
  on_behalf_of_user?: string;
  /**
   * Specifies whether to retrieve the JS player. Disabling this will make session creation faster.
   *
   * **NOTE:** Deciphering formats is not possible without the JS player.
   */
  retrieve_player?: boolean;
  /**
   * Specifies whether to enable safety mode. This will prevent the session from loading any potentially unsafe content.
   */
  enable_safety_mode?: boolean;
  /**
   * Specifies whether to generate the session data locally or retrieve it from YouTube.
   * This can be useful if you need more performance.
   *
   * **NOTE:** If you are using the cache option and a session has already been generated, this will be ignored.
   * If you want to force a new session to be generated, you must clear the cache or disable session caching.
   */
  generate_session_locally?: boolean;
  /**
   * Specifies whether the session data should be cached.
   */
  enable_session_cache?: boolean;
  /**
   * Platform to use for the session.
   */
  device_category?: DeviceCategory;
  /**
   * InnerTube client type.
   */
  client_type?: ClientType;
  /**
   * The time zone.
   */
  timezone?: string;
  /**
   * Used to cache algorithms, session data, and OAuth2 tokens.
   */
  cache?: ICache;
  /**
   * YouTube cookies.
   */
  cookie?: string;
  /**
   * Setting this to a valid and persistent visitor data string will allow YouTube to give this session tailored content even when not logged in.
   * A good way to get a valid one is by either grabbing it from a browser or calling InnerTube's `/visitor_id` endpoint.
   */
  visitor_data?: string;
  /**
   * Fetch function to use.
   */
  fetch?: FetchFunction;
  /**
   * Proof of Origin Token. This is an attestation token generated by BotGuard/DroidGuard. It is used to confirm that the request is coming from a genuine client.
   */
  po_token?: string;

  constructor(config?: InnerTubeConfig) {
    this.lang = config.lang;
  }

  public get innertube(): Promise<Innertube> {
    if (!this._innertube) {
      return Innertube.create({ lang: this.lang }).then((instance) => {
        this._innertube = instance; // 初始化后缓存实例
        return this._innertube;
      });
    }
    return Promise.resolve(this._innertube);
  }

  public reset(): void {
    this._innertube = null;
  }
}

const innertubeClient = new InnertubeClient({
  lang: baseConfig.language, // 设置语言为中文
}); // 设置语言为中文
// 获取评论
export const getComments = async (
  videoId: string,
  sort_by = "NEWEST_FIRST"
) => {
  const innertube = await innertubeClient.innertube;
  const comments = await innertube.getComments(videoId, sort_by as any);
  return comments.contents.map((item) => {
    let comment = item.comment.content.text;
    let author = item.comment.author.name;
    return {
      comment,
      author,
      id: item.comment.comment_id,
    };
    // 举报评论
  });
};
export default innertubeClient;
